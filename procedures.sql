USE BRYNHILDR;
DROP PROCEDURE IF EXISTS buyoilproc;
DROP PROCEDURE IF EXISTS selloilproc;
DROP PROCEDURE IF EXISTS paymentproc;
DROP PROCEDURE IF EXISTS searchtrader;
DROP PROCEDURE IF EXISTS rating_monthly;
DROP PROCEDURE IF EXISTS aggproc;
DELIMITER //
CREATE PROCEDURE buyoilproc (IN AMOUNT INT, IN CID INT, IN TRID INT, IN COMMTYPE INT , OUT RET INT)
    BEGIN

    DECLARE CUR_PRICE INT;
    DECLARE CUR_CLIENT_LEVEL INT;
    DECLARE CUR_OIL DECIMAL(65,4);
    DECLARE CUR_CASH DECIMAL(65,4);
    DECLARE CUR_RATE DECIMAL(65,4);
    DECLARE COMM_CASH DECIMAL(65,4);
    DECLARE COMM_OIL DECIMAL(65,4);
    DECLARE BASE_CASH DECIMAL(65,4);
    DECLARE AFT_CASH DECIMAL(65,4);
    DECLARE AFT_OIL DECIMAL(65,4);
    DECLARE TID INT;
    DECLARE IFTR INT;

    START TRANSACTION;

    SET RET = 0;
    IF TRID IS NOT NULL THEN
        SELECT EXISTS (SELECT UID FROM TRADERS WHERE UID = TRID) INTO IFTR;
        IF IFTR = 0 THEN
            SET RET = -1;
        END IF;
    END IF;

    IF RET = 0 THEN
        SELECT PRICE FROM OILPRICES ORDER BY PRICE_DATE DESC LIMIT 1 INTO CUR_PRICE;
        SELECT LEVEL, OIL_BALAN, CASH_BALAN FROM CLIENTS WHERE UID = CID INTO CUR_CLIENT_LEVEL, CUR_OIL, CUR_CASH;

        IF CUR_CLIENT_LEVEL = 0 THEN
            SELECT RATE_SILVER FROM COMM_RATES ORDER BY RATE_DATE DESC LIMIT 1 INTO CUR_RATE;
        ELSE
            SELECT RATE_GOLD FROM COMM_RATES ORDER BY RATE_DATE DESC LIMIT 1 INTO CUR_RATE;
        END IF;
        IF COMMTYPE = 0 THEN
            SET COMM_OIL = AMOUNT * CUR_RATE;
            SET COMM_CASH = 0.0;
        ELSE
            SET COMM_OIL = 0.0;
            SET COMM_CASH = AMOUNT * CUR_PRICE * CUR_RATE;
        END IF;
        SET BASE_CASH = AMOUNT * CUR_PRICE;
        SET AFT_CASH = CUR_CASH - COMM_CASH - BASE_CASH;
        SET AFT_OIL = CUR_OIL - COMM_OIL + AMOUNT;
        IF AFT_OIL >= 0 THEN
            UPDATE CLIENTS SET OIL_BALAN = AFT_OIL, CASH_BALAN = AFT_CASH WHERE UID = CID;
            INSERT INTO CLIENTS_TRANS (T_DATE, C_ID, TR_ID, T_TYPE) VALUES (NOW(), CID, TRID, 0);
            SELECT LAST_INSERT_ID() INTO TID;
            INSERT INTO OIL_TRANSACTIONS (T_ID, COMM_OIL, COMM_CASH, OIL_BALAN, CASH_BALAN, COMM_RATE, PRICE, AMOUNT) VALUES (TID, COMM_OIL, COMM_CASH, AFT_OIL, AFT_CASH, CUR_RATE, CUR_PRICE, AMOUNT);
            SET RET = TID;
        ELSE
            SET RET = -2;
        END IF;
    END IF;
    COMMIT;
END//

CREATE PROCEDURE selloilproc (IN AMOUNT INT, IN CID INT, IN TRID INT, IN COMMTYPE INT , OUT RET INT)
    BEGIN

    DECLARE CUR_PRICE INT;
    DECLARE CUR_CLIENT_LEVEL INT;
    DECLARE CUR_OIL DECIMAL(65,4);
    DECLARE CUR_CASH DECIMAL(65,4);
    DECLARE CUR_RATE DECIMAL(65,4);
    DECLARE COMM_CASH DECIMAL(65,4);
    DECLARE COMM_OIL DECIMAL(65,4);
    DECLARE BASE_CASH DECIMAL(65,4);
    DECLARE AFT_CASH DECIMAL(65,4);
    DECLARE AFT_OIL DECIMAL(65,4);
    DECLARE TID INT;
    DECLARE IFTR INT;

    START TRANSACTION;

    SET RET = 0;
    IF TRID IS NOT NULL THEN
        SELECT EXISTS (SELECT UID FROM TRADERS WHERE UID = TRID) INTO IFTR;
        IF IFTR = 0 THEN
            SET RET = -1;
        END IF;
    END IF;

    IF RET = 0 THEN
        SELECT PRICE FROM OILPRICES ORDER BY PRICE_DATE DESC LIMIT 1 INTO CUR_PRICE;
        SELECT LEVEL, OIL_BALAN, CASH_BALAN FROM CLIENTS WHERE UID = CID INTO CUR_CLIENT_LEVEL, CUR_OIL, CUR_CASH;

        IF CUR_CLIENT_LEVEL = 0 THEN
            SELECT RATE_SILVER FROM COMM_RATES ORDER BY RATE_DATE DESC LIMIT 1 INTO CUR_RATE;
        ELSE
            SELECT RATE_GOLD FROM COMM_RATES ORDER BY RATE_DATE DESC LIMIT 1 INTO CUR_RATE;
        END IF;
        IF COMMTYPE = 0 THEN
            SET COMM_OIL = AMOUNT * CUR_RATE;
            SET COMM_CASH = 0.0;
        ELSE
            SET COMM_OIL = 0.0;
            SET COMM_CASH = AMOUNT * CUR_PRICE * CUR_RATE;
        END IF;
        SET BASE_CASH = AMOUNT * CUR_PRICE;
        SET AFT_CASH = CUR_CASH - COMM_CASH + BASE_CASH;
        SET AFT_OIL = CUR_OIL - COMM_OIL - AMOUNT;
        IF AFT_OIL >= 0 THEN
            UPDATE CLIENTS SET OIL_BALAN = AFT_OIL, CASH_BALAN = AFT_CASH WHERE UID = CID;
            INSERT INTO CLIENTS_TRANS (T_DATE, C_ID, TR_ID, T_TYPE) VALUES (NOW(), CID, TRID, 1);
            SELECT LAST_INSERT_ID() INTO TID;
            INSERT INTO OIL_TRANSACTIONS (T_ID, COMM_OIL, COMM_CASH, OIL_BALAN, CASH_BALAN, COMM_RATE, PRICE, AMOUNT) VALUES (TID, COMM_OIL, COMM_CASH, AFT_OIL, AFT_CASH, CUR_RATE, CUR_PRICE, AMOUNT);
            SET RET = TID;
        ELSE
            SET RET = -2;
        END IF;
    END IF;
    COMMIT;
END//

CREATE PROCEDURE paymentproc (IN AMOUNT INT, IN CID INT, IN TRID INT , OUT RET INT)
    BEGIN

    DECLARE CUR_CASH DECIMAL(65,4);
    DECLARE AFT_CASH DECIMAL(65,4);
    DECLARE TID INT;
    DECLARE IFTR INT;

    START TRANSACTION;

    SET RET = 0;
    IF TRID IS NOT NULL THEN
        SELECT EXISTS (SELECT UID FROM TRADERS WHERE UID = TRID) INTO IFTR;
        IF IFTR = 0 THEN
            SET RET = -1;
        END IF;
    END IF;

    IF RET = 0 THEN
        SELECT CASH_BALAN FROM CLIENTS WHERE UID = CID INTO CUR_CASH;

        SET AFT_CASH = CUR_CASH + AMOUNT;
        UPDATE CLIENTS SET CASH_BALAN = AFT_CASH WHERE UID = CID;
        INSERT INTO CLIENTS_TRANS (T_DATE, C_ID, TR_ID, T_TYPE) VALUES (NOW(), CID, TRID, 2);
        SELECT LAST_INSERT_ID() INTO TID;
        INSERT INTO PAYMENTS (T_ID, AMOUNT, CASH_BALAN) VALUES (TID, AMOUNT, AFT_CASH);
        SET RET = TID;
    END IF;
    COMMIT;
END//

CREATE PROCEDURE searchtrader(IN TRID INT, OUT RET INT)
    BEGIN
    SET RET = 0;
    SELECT EXISTS(SELECT UID FROM TRADERS WHERE UID=TRID) INTO RET;
END//

CREATE PROCEDURE rating_monthly()
    BEGIN
    DECLARE UID INT;
    DECLARE FIN INT;
    DECLARE RAT INT;
    DECLARE AMT INT;
    DECLARE LVL INT;
    DECLARE CUSR CURSOR FOR SELECT UID, LVL FROM CLIENTS;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIN = -1;
    START TRANSACTION;
    OPEN CUSR;
    REPEAT
        FETCH CUSR INTO UID, LVL;
        SELECT SUM(AMOUNT) FROM OIL_TRANSACTIONS O JOIN CLIENTS_TRANS C ON O.T_ID = C.T_ID WHERE C.T_DATE >= DATE_ADD(DATE_ADD(DATE_SUB(CURDATE(),INTERVAL DAY(CURDATE())-1 DAY),INTERVAL -1 MONTH), INTERVAL 0 HOUR) AND C.T_DATE < DATE_ADD(DATE_ADD(DATE_SUB(CURDATE(),INTERVAL DAY(CURDATE())-1 DAY),INTERVAL 0 MONTH), INTERVAL 0 HOUR) AND C.C_ID = UID INTO AMT;
        SET RAT = 0;
        IF AMT IS NOT NULL THEN
            IF AMT > 30 THEN
                SET RAT = 1;
            END IF;
        END IF;
        IF RAT <> LVL THEN
            UPDATE CLIENTS C SET LEVEL = RAT WHERE C.UID = UID;
        END IF;
        UNTIL FIN = -1
    END REPEAT;
    CLOSE CUSR;
    COMMIT;
END//

CREATE PROCEDURE aggproc(IN DAT1 DATETIME, IN DAT2 DATETIME, OUT BUY DECIMAL(65,4), OUT SELL DECIMAL(65,4), OUT TOTAL_OIL DECIMAL(65,4), OUT TOTAL_CASH DECIMAL(65,4), OUT TOTAL_COMM_OIL DECIMAL(65,4), OUT TOTAL_COMM_CASH DECIMAL(65,4), OUT TOTAL_PAYMENT DECIMAL(65,4))
    BEGIN
    DECLARE BUY_CASH DECIMAL(65,4);
    DECLARE SELL_CASH DECIMAL(65,4);
    DECLARE BUY_COMM_OIL DECIMAL(65,4);
    DECLARE SELL_COMM_OIL DECIMAL(65,4);
    DECLARE BUY_COMM_CASH DECIMAL(65,4);
    DECLARE SELL_COMM_CASH DECIMAL(65,4);
    START TRANSACTION;
    SELECT SUM(AMOUNT), SUM(AMOUNT*COMM_RATE), SUM(COMM_OIL), SUM(COMM_CASH) FROM OIL_TRANSACTIONS O JOIN CLIENTS_TRANS C ON O.T_ID = C.T_ID WHERE T_DATE >= DAT1 AND T_DATE <= DAT2 AND C.T_TYPE = 0 INTO BUY, BUY_CASH, BUY_COMM_OIL, BUY_COMM_CASH;
    SELECT SUM(AMOUNT), SUM(AMOUNT*COMM_RATE), SUM(COMM_OIL), SUM(COMM_CASH) FROM OIL_TRANSACTIONS O JOIN CLIENTS_TRANS C ON O.T_ID = C.T_ID WHERE T_DATE >= DAT1 AND T_DATE <= DAT2 AND C.T_TYPE = 1 INTO SELL, SELL_CASH, SELL_COMM_OIL, SELL_COMM_CASH;
    SET TOTAL_OIL = BUY + SELL;
    SET TOTAL_CASH = BUY_CASH + SELL_CASH;
    SET TOTAL_COMM_CASH = BUY_COMM_CASH + SELL_COMM_CASH;
    SET TOTAL_COMM_OIL = BUY_COMM_OIL + SELL_COMM_OIL;
    SELECT SUM(AMOUNT) FROM PAYMENTS P JOIN CLIENTS_TRANS C ON P.T_ID = C.T_ID WHERE C.T_DATE >= DAT1 AND T_DATE <= DAT2 INTO TOTAL_PAYMENT;
END//
